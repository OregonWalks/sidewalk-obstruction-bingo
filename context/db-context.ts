import { DBSchema, IDBPDatabase } from 'idb';
import React from 'react';

interface ReportBase {
  /** Generated by pushid(). This makes it both probabilistically globally
   * unique and ascending by the time it was generated. */
  uuid: string;
  /** The time at which this report was queued. */
  addTime: Date;
  /** When the report last started being sent. If this is older than a
   * reasonable timeout, we should assume the send failed. */
  sending: Date | null;

  /** Most reports are that someone found an obstruction, but if they un-mark a
   * tile after that tile was reported, we report a 'Cancel' update to undo it. */
  type: 'Found' | 'Cancel';
}
export interface FoundReport extends ReportBase {
  type: 'Found';
  /** Currently the alt text of the tile. This should probably be something
   * more stable. */
  tile: string;
  /** Extra information about this particular tile. */
  details?: string;
  /** The name of a location, as opposed to a geolocation. Either this or
   * lat/long/accuracy will be set. */
  textLocation: string | "";
  latitude?: number;
  longitude?: number;
  /** As in the Geolocation interface, the 95% confidence radius in meters. */
  accuracy?: number;
}
export interface CancelReport extends ReportBase {
  type: 'Cancel';
  // Identifies the report to cancel with its uuid.
}

export interface SobDBSchema extends DBSchema {
  queuedReports: {
    key: string;
    value: FoundReport | CancelReport;
    indexes: {
      tile: string;
      addTime: Date;
    };
  };
  keyval: {
    key: string;
    value: unknown;
  };
}

export type SobDB = IDBPDatabase<SobDBSchema>;

const DbContext = React.createContext<SobDB | undefined>(undefined);

export default DbContext;
